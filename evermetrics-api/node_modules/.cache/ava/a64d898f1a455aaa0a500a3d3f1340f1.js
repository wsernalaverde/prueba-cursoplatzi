'use strict';

var _asyncToGenerator2 = require('/Volumes/Macintosh HD/eversocial6/Desktop/evermetrics-api/node_modules/babel-runtime/helpers/asyncToGenerator.js');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareVariable":["id"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }(); // es lo mismo que require pero con la sintexis de emmascripts modules
// es una herramienta para hacer testing de microservicios con micro
// mÃ³dulo que me permite hacer http request utilizando promesas


var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _micro = require('micro');

var _micro2 = _interopRequireDefault(_micro);

var _testListen = require('test-listen');

var _testListen2 = _interopRequireDefault(_testListen);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _fixtures = require('./fixtures/');

var _fixtures2 = _interopRequireDefault(_fixtures);

var _users = require('../users');

var _users2 = _interopRequireDefault(_users);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_ava2.default.beforeEach((() => {
  var _ref = (0, _asyncToGenerator3.default)(function* (t) {
    let srv = (0, _micro2.default)(_users2.default);
    t.context.url = yield (0, _testListen2.default)(srv);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})());

(0, _ava2.default)('POST /', (() => {
  var _ref2 = (0, _asyncToGenerator3.default)(function* (t) {
    var _rec = new _powerAssertRecorder(),
        _rec2 = new _powerAssertRecorder(),
        _rec3 = new _powerAssertRecorder();

    let user = _fixtures2.default.getUser();
    let url = t.context.url;

    let options = {
      method: 'POST',
      url: url,
      json: true,
      body: {
        name: user.name,
        username: user.username,
        password: user.password,
        email: user.email
      },
      resolveWithFullResponse: true
    };

    let response = yield (0, _requestPromise2.default)(options);

    delete user.email;
    delete user.password;

    t.is(_rec._expr(_rec._capt(_rec._capt(response, 'arguments/0/object').statusCode, 'arguments/0'), {
      content: 't.is(response.statusCode, 201)',
      filepath: 'test/users-test.js',
      line: 37,
      async: true,
      ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"response","range":[5,13]},"property":{"type":"Identifier","name":"statusCode","range":[14,24]},"computed":false,"range":[5,24]},{"type":"NumericLiteral","value":201,"range":[26,29]}],"range":[0,30]}',
      tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"response","range":[5,13]},{"type":{"label":"."},"range":[13,14]},{"type":{"label":"name"},"value":"statusCode","range":[14,24]},{"type":{"label":","},"range":[24,25]},{"type":{"label":"num"},"value":201,"range":[26,29]},{"type":{"label":")"},"range":[29,30]}]',
      visitorKeys: _powerAssertVisitorKeys
    }), 201);
    t.deepEqual(_rec2._expr(_rec2._capt(_rec2._capt(response, 'arguments/0/object').body, 'arguments/0'), {
      content: 't.deepEqual(response.body, user)',
      filepath: 'test/users-test.js',
      line: 38,
      async: true,
      ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"response","range":[12,20]},"property":{"type":"Identifier","name":"body","range":[21,25]},"computed":false,"range":[12,25]},{"type":"Identifier","name":"user","range":[27,31]}],"range":[0,32]}',
      tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"response","range":[12,20]},{"type":{"label":"."},"range":[20,21]},{"type":{"label":"name"},"value":"body","range":[21,25]},{"type":{"label":","},"range":[25,26]},{"type":{"label":"name"},"value":"user","range":[27,31]},{"type":{"label":")"},"range":[31,32]}]',
      visitorKeys: _powerAssertVisitorKeys
    }), _rec3._expr(_rec3._capt(user, 'arguments/1'), {
      content: 't.deepEqual(response.body, user)',
      filepath: 'test/users-test.js',
      line: 38,
      async: true,
      ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"response","range":[12,20]},"property":{"type":"Identifier","name":"body","range":[21,25]},"computed":false,"range":[12,25]},{"type":"Identifier","name":"user","range":[27,31]}],"range":[0,32]}',
      tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"response","range":[12,20]},{"type":{"label":"."},"range":[20,21]},{"type":{"label":"name"},"value":"body","range":[21,25]},{"type":{"label":","},"range":[25,26]},{"type":{"label":"name"},"value":"user","range":[27,31]},{"type":{"label":")"},"range":[31,32]}]',
      visitorKeys: _powerAssertVisitorKeys
    }));
  });

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
})());

(0, _ava2.default)('GET /', (() => {
  var _ref3 = (0, _asyncToGenerator3.default)(function* (t) {
    var _rec4 = new _powerAssertRecorder(),
        _rec5 = new _powerAssertRecorder();

    let user = _fixtures2.default.getuser();
    let url = t.context.url;

    let options = {
      method: 'GET',
      url: `${ url }/${ user.username }`,
      json: true
    };

    let body = yield (0, _requestPromise2.default)(options);

    delete user.email;
    delete user.password;

    t.deepEqual(_rec4._expr(_rec4._capt(body, 'arguments/0'), {
      content: 't.deepEqual(body, user)',
      filepath: 'test/users-test.js',
      line: 56,
      async: true,
      ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"body","range":[12,16]},{"type":"Identifier","name":"user","range":[18,22]}],"range":[0,23]}',
      tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"body","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"name"},"value":"user","range":[18,22]},{"type":{"label":")"},"range":[22,23]}]',
      visitorKeys: _powerAssertVisitorKeys
    }), _rec5._expr(_rec5._capt(user, 'arguments/1'), {
      content: 't.deepEqual(body, user)',
      filepath: 'test/users-test.js',
      line: 56,
      async: true,
      ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"body","range":[12,16]},{"type":"Identifier","name":"user","range":[18,22]}],"range":[0,23]}',
      tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"body","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"name"},"value":"user","range":[18,22]},{"type":{"label":")"},"range":[22,23]}]',
      visitorKeys: _powerAssertVisitorKeys
    }));
  });

  return function (_x3) {
    return _ref3.apply(this, arguments);
  };
})());
//# sourceMappingURL=../node_modules/.cache/ava/a64d898f1a455aaa0a500a3d3f1340f1.js.map