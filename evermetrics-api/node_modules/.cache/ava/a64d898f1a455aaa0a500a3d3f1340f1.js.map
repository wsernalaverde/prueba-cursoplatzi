{"version":3,"sources":["users-test.js"],"names":["beforeEach","t","srv","context","url","user","getUser","options","method","json","body","name","username","password","email","resolveWithFullResponse","response","is","statusCode","deepEqual","getuser"],"mappings":"AAAA;;;;;;;+aAEuB;AAEU;AACK;;;AAHtC;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,cAAKA,UAAL;AAAA,6CAAgB,WAAMC,CAAN,EAAW;AACzB,QAAIC,MAAM,qCAAV;AACAD,MAAEE,OAAF,CAAUC,GAAV,GAAgB,MAAM,0BAAOF,GAAP,CAAtB;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKA,mBAAK,QAAL;AAAA,8CAAe,WAAMD,CAAN,EAAW;AAAA;AAAA;AAAA;;AACxB,QAAII,OAAO,mBAASC,OAAT,EAAX;AACA,QAAIF,MAAMH,EAAEE,OAAF,CAAUC,GAApB;;AAEA,QAAIG,UAAU;AACZC,cAAQ,MADI;AAEZJ,WAAKA,GAFO;AAGZK,YAAM,IAHM;AAIZC,YAAM;AACJC,cAAMN,KAAKM,IADP;AAEJC,kBAAUP,KAAKO,QAFX;AAGJC,kBAAUR,KAAKQ,QAHX;AAIJC,eAAOT,KAAKS;AAJR,OAJM;AAUZC,+BAAyB;AAVb,KAAd;;AAaA,QAAIC,WAAW,MAAM,8BAAQT,OAAR,CAArB;;AAEA,WAAOF,KAAKS,KAAZ;AACA,WAAOT,KAAKQ,QAAZ;;AAEAZ,MAAEgB,EAAF,uBAAK,2CAASC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA0B,GAA1B;AACAjB,MAAEkB,SAAF,yBAAY,4CAAST,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAA2BL,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GAxBD;;AAAA;AAAA;AAAA;AAAA;;AA0BA,mBAAK,OAAL;AAAA,8CAAc,WAAMJ,CAAN,EAAW;AAAA;AAAA;;AACvB,QAAII,OAAO,mBAASe,OAAT,EAAX;AACA,QAAIhB,MAAMH,EAAEE,OAAF,CAAUC,GAApB;;AAEA,QAAIG,UAAU;AACZC,cAAQ,KADI;AAEZJ,WAAM,IAAEA,GAAI,MAAGC,KAAKO,QAAS,GAFjB;AAGZH,YAAM;AAHM,KAAd;;AAMA,QAAIC,OAAO,MAAM,8BAAQH,OAAR,CAAjB;;AAEA,WAAOF,KAAKS,KAAZ;AACA,WAAOT,KAAKQ,QAAZ;;AAEAZ,MAAEkB,SAAF,yBAAYT,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAkBL,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GAhBD;;AAAA;AAAA;AAAA;AAAA","file":"users-test.js","sourcesContent":["'use strict'\n\nimport test from 'ava' // es lo mismo que require pero con la sintexis de emmascripts modules\nimport micro from 'micro'\nimport listen from 'test-listen' // es una herramienta para hacer testing de microservicios con micro\nimport request from 'request-promise' // mÃ³dulo que me permite hacer http request utilizando promesas\nimport fixtures from './fixtures/'\nimport users from '../users'\n\ntest.beforeEach(async t => {\n  let srv = micro(users)\n  t.context.url = await listen(srv)\n})\n\ntest('POST /', async t => {\n  let user = fixtures.getUser()\n  let url = t.context.url\n\n  let options = {\n    method: 'POST',\n    url: url,\n    json: true,\n    body: {\n      name: user.name,\n      username: user.username,\n      password: user.password,\n      email: user.email\n    },\n    resolveWithFullResponse: true\n  }\n\n  let response = await request(options)\n\n  delete user.email\n  delete user.password\n\n  t.is(response.statusCode, 201)\n  t.deepEqual(response.body, user)\n})\n\ntest('GET /', async t => {\n  let user = fixtures.getuser()\n  let url = t.context.url\n\n  let options = {\n    method: 'GET',\n    url: `${url}/${user.username}`,\n    json: true\n  }\n\n  let body = await request(options)\n\n  delete user.email\n  delete user.password\n\n  t.deepEqual(body, user)\n})\n"]}