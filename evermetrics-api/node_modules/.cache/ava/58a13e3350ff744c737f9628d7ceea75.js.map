{"version":3,"sources":["estadisticas-test.js"],"names":["beforeEach","t","srv","context","url","dates","getEstadisticas","body","publicId","json","deepEqual","options","method","userId","year","month","allfans","newfans","nolikes","prints","activeusers","resolveWithFullResponse","throws","token","signToken","secret","headers","response","is","statusCode"],"mappings":"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","file":"estadisticas-test.js","sourcesContent":["'use strict'\n\nimport test from 'ava' // es lo mismo que require pero con la sintexis de emmascripts modules\nimport micro from 'micro'\nimport listen from 'test-listen' // es una herramienta para hacer testing de microservicios con micro\nimport request from 'request-promise' // mÃ³dulo que me permite hacer http request utilizando promesas\nimport fixtures from './fixtures/'\nimport estadisticas from '../estadisticas'\nimport utils from '../lib/utils'\nimport config from '../config'\n\ntest.beforeEach(async t => {\n  let srv = micro(estadisticas)\n  t.context.url = await listen(srv)\n})\n\ntest('GET /:id', async t => {\n  let dates = fixtures.getEstadisticas()\n  let url = t.context.url\n\n  let body = await request({ url: `${url}/${dates.publicId}`, json: true })\n  t.deepEqual(body, dates)\n})\n\ntest('no token POST /', async t => {\n  let dates = fixtures.getEstadisticas()\n  let url = t.context.url\n\n  let options = {\n    method: 'POST',\n    url: url,\n    json: true,\n    body: {\n      userId: dates.userId,\n      year: dates.year,\n      month: dates.month,\n      allfans: dates.allfans,\n      newfans: dates.newfans,\n      nolikes: dates.nolikes,\n      prints: dates.prints,\n      activeusers: dates.activeusers\n    },\n    resolveWithFullResponse: true\n  }\n\n  t.throws(request(options), /invalid token/)\n})\n\ntest('secure POST /', async t => {\n  let dates = fixtures.getEstadisticas()\n  let url = t.context.url\n  let token = await utils.signToken({ userId: dates.userId }, config.secret)\n\n  let options = {\n    method: 'POST',\n    url: url,\n    json: true,\n    body: {\n      userId: dates.userId,\n      year: dates.year,\n      month: dates.month,\n      allfans: dates.allfans,\n      newfans: dates.newfans,\n      nolikes: dates.nolikes,\n      prints: dates.prints,\n      activeusers: dates.activeusers\n    },\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    resolveWithFullResponse: true\n  }\n\n  let response = await request(options)\n\n  t.is(response.statusCode, 201)\n  t.deepEqual(response.body, dates)\n})\n\ntest('invalid token POST /', async t => {\n  let dates = fixtures.getEstadisticas()\n  let url = t.context.url\n  let token = await utils.signToken({ userId: 'hacky' }, config.secret)\n\n  let options = {\n    method: 'POST',\n    url: url,\n    json: true,\n    body: {\n      userId: dates.userId,\n      year: dates.year,\n      month: dates.month,\n      allfans: dates.allfans,\n      newfans: dates.newfans,\n      nolikes: dates.nolikes,\n      prints: dates.prints,\n      activeusers: dates.activeusers\n    },\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    resolveWithFullResponse: true\n  }\n\n  t.throws(request(options), /invalid token/)\n})\n"]}