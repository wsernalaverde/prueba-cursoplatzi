{"version":3,"sources":["pictures-test.js"],"names":["beforeEach","t","srv","context","url","image","getImage","body","publicId","json","deepEqual","options","method","description","src","userId","resolveWithFullResponse","throws","token","signToken","secret","headers","response","is","statusCode","id","imageNew","JSON","parse","liked","likes","images","getImages","getImagesByTag"],"mappings":"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","file":"pictures-test.js","sourcesContent":["'use strict'\n\nimport test from 'ava' // es lo mismo que require pero con la sintexis de emmascripts modules\nimport micro from 'micro'\nimport listen from 'test-listen' // es una herramienta para hacer testing de microservicios con micro\nimport request from 'request-promise' // módulo que me permite hacer http request utilizando promesas\nimport fixtures from './fixtures/'\nimport pictures from '../pictures'\nimport utils from '../lib/utils'\nimport config from '../config'\n\ntest.beforeEach(async t => {\n  let srv = micro(pictures)\n  t.context.url = await listen(srv)\n})\n\ntest('GET /:id', async t => {\n  let image = fixtures.getImage()\n  let url = t.context.url\n\n  let body = await request({ url: `${url}/${image.publicId}`, json: true })\n  t.deepEqual(body, image)\n})\n\ntest('no token POST /', async t => {\n  let image = fixtures.getImage()\n  let url = t.context.url\n\n  let options = {\n    method: 'POST',\n    url: url,\n    json: true,\n    body: {\n      description: image.description,\n      src: image.src,\n      userId: image.userId\n    },\n    resolveWithFullResponse: true\n  }\n\n  t.throws(request(options), /invalid token/)\n})\n\ntest('secure POST /', async t => {\n  let image = fixtures.getImage()\n  let url = t.context.url\n  let token = await utils.signToken({ userId: image.userId }, config.secret)\n\n  let options = {\n    method: 'POST',\n    url: url,\n    json: true,\n    body: {\n      description: image.description,\n      src: image.src,\n      userId: image.userId\n    },\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    resolveWithFullResponse: true\n  }\n\n  let response = await request(options)\n\n  t.is(response.statusCode, 201)\n  t.deepEqual(response.body, image)\n})\n\ntest('invalid token POST /', async t => {\n  let image = fixtures.getImage()\n  let url = t.context.url\n  let token = await utils.signToken({ userId: 'hacky' }, config.secret)\n\n  let options = {\n    method: 'POST',\n    url: url,\n    json: true,\n    body: {\n      description: image.description,\n      src: image.src,\n      userId: image.userId\n    },\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    resolveWithFullResponse: true\n  }\n\n  t.throws(request(options), /invalid token/)\n})\n\ntest('POST /:id/like', async t => {\n  let image = fixtures.getImage()\n  let url = t.context.url\n\n  let options = {\n    method: 'POST',\n    url: `${url}/${image.id}/like`,\n    json: true\n  }\n\n  let body = await request(options)\n  let imageNew = JSON.parse(JSON.stringify(image)) // acá clonamos la imagen\n  imageNew.liked = true\n  imageNew.likes = 1\n\n  t.deepEqual(body, imageNew)\n})\n\ntest('GET /list', async t => {\n  let images = fixtures.getImages()\n  let url = t.context.url\n\n  let options = {\n    method: 'GET',\n    url: `${url}/list`,\n    json: true\n  }\n\n  let body = await request(options)\n\n  t.deepEqual(body, images)\n})\n\ntest('GET /tag/:tag', async t => {\n  let images = fixtures.getImagesByTag()\n  let url = t.context.url\n\n  let options = {\n    method: 'GET',\n    url: `${url}/tag/awesome`,\n    json: true\n  }\n\n  let body = await request(options)\n  t.deepEqual(body, images)\n})\n"]}