'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }();

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _lib = require('../lib/');

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _listen = require('./_listen');

var _listen2 = _interopRequireDefault(_listen);

var _thenSleep = require('then-sleep');

var _thenSleep2 = _interopRequireDefault(_thenSleep);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

(0, _ava2.default)('send(200, <String>)', function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(t) {
    var fn, url, res;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      var _rec = new _powerAssertRecorder();

      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            fn = function () {
              var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(req, res) {
                return _regenerator2.default.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        (0, _lib.send)(res, 200, 'woot');

                      case 1:
                      case 'end':
                        return _context.stop();
                    }
                  }
                }, _callee, undefined);
              })),
                  _this = undefined;
              return function fn(_x2, _x3) {
                return ref.apply(_this, arguments);
              };
            }();

            _context2.next = 3;
            return (0, _listen2.default)(fn);

          case 3:
            url = _context2.sent;
            _context2.next = 6;
            return (0, _requestPromise2.default)(url);

          case 6:
            res = _context2.sent;

            t.same(_rec._expr(_rec._capt(res, 'arguments/0'), {
              content: 't.same(res, \'woot\')',
              filepath: 'build/test/index.js',
              line: 70
            }), 'woot');

          case 8:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })),
      _this = undefined;
  return function (_x) {
    return ref.apply(_this, arguments);
  };
}());

(0, _ava2.default)('send(200, <Object>)', function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(t) {
    var fn, url, res;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      var _rec2 = new _powerAssertRecorder(),
          _rec3 = new _powerAssertRecorder();

      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            fn = function () {
              var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(req, res) {
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        (0, _lib.send)(res, 200, { a: 'b' });

                      case 1:
                      case 'end':
                        return _context3.stop();
                    }
                  }
                }, _callee3, undefined);
              })),
                  _this = undefined;
              return function fn(_x5, _x6) {
                return ref.apply(_this, arguments);
              };
            }();

            _context4.next = 3;
            return (0, _listen2.default)(fn);

          case 3:
            url = _context4.sent;
            _context4.next = 6;
            return (0, _requestPromise2.default)(url, { json: true });

          case 6:
            res = _context4.sent;

            t.same(_rec2._expr(_rec2._capt(res, 'arguments/0'), {
              content: 't.same(res, { a: \'b\' })',
              filepath: 'build/test/index.js',
              line: 124
            }), _rec3._expr(_rec3._capt({ a: 'b' }, 'arguments/1'), {
              content: 't.same(res, { a: \'b\' })',
              filepath: 'build/test/index.js',
              line: 124
            }));

          case 8:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  })),
      _this = undefined;
  return function (_x4) {
    return ref.apply(_this, arguments);
  };
}());

(0, _ava2.default)('send(<Number>)', function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(t) {
    var fn, url;
    return _regenerator2.default.wrap(function _callee6$(_context6) {
      var _rec4 = new _powerAssertRecorder();

      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            fn = function () {
              var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(req, res) {
                return _regenerator2.default.wrap(function _callee5$(_context5) {
                  while (1) {
                    switch (_context5.prev = _context5.next) {
                      case 0:
                        (0, _lib.send)(res, 404);

                      case 1:
                      case 'end':
                        return _context5.stop();
                    }
                  }
                }, _callee5, undefined);
              })),
                  _this = undefined;
              return function fn(_x8, _x9) {
                return ref.apply(_this, arguments);
              };
            }();

            _context6.next = 3;
            return (0, _listen2.default)(fn);

          case 3:
            url = _context6.sent;
            _context6.prev = 4;
            _context6.next = 7;
            return (0, _requestPromise2.default)(url);

          case 7:
            _context6.next = 12;
            break;

          case 9:
            _context6.prev = 9;
            _context6.t0 = _context6['catch'](4);

            t.same(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(_context6, 'arguments/0/object/object').t0, 'arguments/0/object').statusCode, 'arguments/0'), {
              content: 't.same(_context6.t0.statusCode, 404)',
              filepath: 'build/test/index.js',
              line: 184
            }), 404);

          case 12:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, undefined, [[4, 9]]);
  })),
      _this = undefined;
  return function (_x7) {
    return ref.apply(_this, arguments);
  };
}());

(0, _ava2.default)('throw with code', function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8(t) {
    var fn, url;
    return _regenerator2.default.wrap(function _callee8$(_context8) {
      var _rec5 = new _powerAssertRecorder();

      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            fn = function () {
              var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(req, res) {
                var err;
                return _regenerator2.default.wrap(function _callee7$(_context7) {
                  while (1) {
                    switch (_context7.prev = _context7.next) {
                      case 0:
                        _context7.next = 2;
                        return (0, _thenSleep2.default)(100);

                      case 2:
                        err = new Error('Error from test (expected)');

                        err.statusCode = 402;
                        throw err;

                      case 5:
                      case 'end':
                        return _context7.stop();
                    }
                  }
                }, _callee7, undefined);
              })),
                  _this = undefined;
              return function fn(_x11, _x12) {
                return ref.apply(_this, arguments);
              };
            }();

            _context8.next = 3;
            return (0, _listen2.default)(fn);

          case 3:
            url = _context8.sent;
            _context8.prev = 4;
            _context8.next = 7;
            return (0, _requestPromise2.default)(url);

          case 7:
            _context8.next = 12;
            break;

          case 9:
            _context8.prev = 9;
            _context8.t0 = _context8['catch'](4);

            t.same(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(_context8, 'arguments/0/object/object').t0, 'arguments/0/object').statusCode, 'arguments/0'), {
              content: 't.same(_context8.t0.statusCode, 402)',
              filepath: 'build/test/index.js',
              line: 252
            }), 402);

          case 12:
          case 'end':
            return _context8.stop();
        }
      }
    }, _callee8, undefined, [[4, 9]]);
  })),
      _this = undefined;
  return function (_x10) {
    return ref.apply(_this, arguments);
  };
}());

(0, _ava2.default)('throw (500)', function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee10(t) {
    var fn, url;
    return _regenerator2.default.wrap(function _callee10$(_context10) {
      var _rec6 = new _powerAssertRecorder();

      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            fn = function () {
              var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9(req, res) {
                return _regenerator2.default.wrap(function _callee9$(_context9) {
                  while (1) {
                    switch (_context9.prev = _context9.next) {
                      case 0:
                        throw new Error('500 from test (expected)');

                      case 1:
                      case 'end':
                        return _context9.stop();
                    }
                  }
                }, _callee9, undefined);
              })),
                  _this = undefined;
              return function fn(_x14, _x15) {
                return ref.apply(_this, arguments);
              };
            }();

            _context10.next = 3;
            return (0, _listen2.default)(fn);

          case 3:
            url = _context10.sent;
            _context10.prev = 4;
            _context10.next = 7;
            return (0, _requestPromise2.default)(url);

          case 7:
            _context10.next = 12;
            break;

          case 9:
            _context10.prev = 9;
            _context10.t0 = _context10['catch'](4);

            t.same(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(_context10, 'arguments/0/object/object').t0, 'arguments/0/object').statusCode, 'arguments/0'), {
              content: 't.same(_context10.t0.statusCode, 500)',
              filepath: 'build/test/index.js',
              line: 312
            }), 500);

          case 12:
          case 'end':
            return _context10.stop();
        }
      }
    }, _callee10, undefined, [[4, 9]]);
  })),
      _this = undefined;
  return function (_x13) {
    return ref.apply(_this, arguments);
  };
}());

(0, _ava2.default)('custom error', function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee12(t) {
    var fn, onError, url, res;
    return _regenerator2.default.wrap(function _callee12$(_context12) {
      var _rec7 = new _powerAssertRecorder();

      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            fn = function () {
              var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee11(req, res) {
                return _regenerator2.default.wrap(function _callee11$(_context11) {
                  while (1) {
                    switch (_context11.prev = _context11.next) {
                      case 0:
                        (0, _thenSleep2.default)(50);
                        throw new Error('500 from test (expected)');

                      case 2:
                      case 'end':
                        return _context11.stop();
                    }
                  }
                }, _callee11, undefined);
              })),
                  _this = undefined;
              return function fn(_x17, _x18) {
                return ref.apply(_this, arguments);
              };
            }();

            onError = function onError(req, res, err) {
              (0, _lib.send)(res, 200, 'got error');
            };

            _context12.next = 4;
            return (0, _listen2.default)(fn, { onError: onError });

          case 4:
            url = _context12.sent;
            _context12.next = 7;
            return (0, _requestPromise2.default)(url);

          case 7:
            res = _context12.sent;

            t.same(_rec7._expr(_rec7._capt(res, 'arguments/0'), {
              content: 't.same(res, \'got error\')',
              filepath: 'build/test/index.js',
              line: 371
            }), 'got error');

          case 9:
          case 'end':
            return _context12.stop();
        }
      }
    }, _callee12, undefined);
  })),
      _this = undefined;
  return function (_x16) {
    return ref.apply(_this, arguments);
  };
}());

(0, _ava2.default)('custom async error', function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee15(t) {
    var fn, onError, url, res;
    return _regenerator2.default.wrap(function _callee15$(_context15) {
      var _rec8 = new _powerAssertRecorder();

      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            fn = function () {
              var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee13(req, res) {
                return _regenerator2.default.wrap(function _callee13$(_context13) {
                  while (1) {
                    switch (_context13.prev = _context13.next) {
                      case 0:
                        (0, _thenSleep2.default)(50);
                        throw new Error('500 from test (expected)');

                      case 2:
                      case 'end':
                        return _context13.stop();
                    }
                  }
                }, _callee13, undefined);
              })),
                  _this = undefined;
              return function fn(_x20, _x21) {
                return ref.apply(_this, arguments);
              };
            }();

            onError = function () {
              var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee14(req, res, err) {
                return _regenerator2.default.wrap(function _callee14$(_context14) {
                  while (1) {
                    switch (_context14.prev = _context14.next) {
                      case 0:
                        _context14.next = 2;
                        return (0, _thenSleep2.default)(50);

                      case 2:
                        (0, _lib.send)(res, 200, 'got async error');

                      case 3:
                      case 'end':
                        return _context14.stop();
                    }
                  }
                }, _callee14, undefined);
              })),
                  _this = undefined;
              return function onError(_x22, _x23, _x24) {
                return ref.apply(_this, arguments);
              };
            }();

            _context15.next = 4;
            return (0, _listen2.default)(fn, { onError: onError });

          case 4:
            url = _context15.sent;
            _context15.next = 7;
            return (0, _requestPromise2.default)(url);

          case 7:
            res = _context15.sent;

            t.same(_rec8._expr(_rec8._capt(res, 'arguments/0'), {
              content: 't.same(res, \'got async error\')',
              filepath: 'build/test/index.js',
              line: 451
            }), 'got async error');

          case 9:
          case 'end':
            return _context15.stop();
        }
      }
    }, _callee15, undefined);
  })),
      _this = undefined;
  return function (_x19) {
    return ref.apply(_this, arguments);
  };
}());

(0, _ava2.default)('json parse error', function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee17(t) {
    var fn, url;
    return _regenerator2.default.wrap(function _callee17$(_context17) {
      var _rec9 = new _powerAssertRecorder();

      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            fn = function () {
              var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee16(req, res) {
                var body;
                return _regenerator2.default.wrap(function _callee16$(_context16) {
                  while (1) {
                    switch (_context16.prev = _context16.next) {
                      case 0:
                        _context16.next = 2;
                        return (0, _lib.json)(req);

                      case 2:
                        body = _context16.sent;

                        (0, _lib.send)(res, 200, body.woot);

                      case 4:
                      case 'end':
                        return _context16.stop();
                    }
                  }
                }, _callee16, undefined);
              })),
                  _this = undefined;
              return function fn(_x26, _x27) {
                return ref.apply(_this, arguments);
              };
            }();

            _context17.next = 3;
            return (0, _listen2.default)(fn);

          case 3:
            url = _context17.sent;
            _context17.prev = 4;
            _context17.next = 7;
            return (0, _requestPromise2.default)(url, {
              method: 'POST',
              body: '{ "bad json" }',
              headers: {
                'Content-Type': 'application/json'
              }
            });

          case 7:
            _context17.next = 12;
            break;

          case 9:
            _context17.prev = 9;
            _context17.t0 = _context17['catch'](4);

            t.same(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(_context17, 'arguments/0/object/object').t0, 'arguments/0/object').statusCode, 'arguments/0'), {
              content: 't.same(_context17.t0.statusCode, 400)',
              filepath: 'build/test/index.js',
              line: 524
            }), 400);

          case 12:
          case 'end':
            return _context17.stop();
        }
      }
    }, _callee17, undefined, [[4, 9]]);
  })),
      _this = undefined;
  return function (_x25) {
    return ref.apply(_this, arguments);
  };
}());

(0, _ava2.default)('json', function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee19(t) {
    var fn, url, body;
    return _regenerator2.default.wrap(function _callee19$(_context19) {
      var _rec10 = new _powerAssertRecorder();

      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            fn = function () {
              var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee18(req, res) {
                var body;
                return _regenerator2.default.wrap(function _callee18$(_context18) {
                  while (1) {
                    switch (_context18.prev = _context18.next) {
                      case 0:
                        _context18.next = 2;
                        return (0, _lib.json)(req);

                      case 2:
                        body = _context18.sent;

                        (0, _lib.send)(res, 200, { response: body.some.cool });

                      case 4:
                      case 'end':
                        return _context18.stop();
                    }
                  }
                }, _callee18, undefined);
              })),
                  _this = undefined;
              return function fn(_x29, _x30) {
                return ref.apply(_this, arguments);
              };
            }();

            _context19.next = 3;
            return (0, _listen2.default)(fn);

          case 3:
            url = _context19.sent;
            _context19.next = 6;
            return (0, _requestPromise2.default)(url, {
              method: 'POST',
              body: { some: { cool: 'json' } },
              json: true
            });

          case 6:
            body = _context19.sent;

            t.same(_rec10._expr(_rec10._capt(_rec10._capt(body, 'arguments/0/object').response, 'arguments/0'), {
              content: 't.same(body.response, \'json\')',
              filepath: 'build/test/index.js',
              line: 589
            }), 'json');

          case 8:
          case 'end':
            return _context19.stop();
        }
      }
    }, _callee19, undefined);
  })),
      _this = undefined;
  return function (_x28) {
    return ref.apply(_this, arguments);
  };
}());

(0, _ava2.default)('json limit (below)', function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee21(t) {
    var fn, url, body;
    return _regenerator2.default.wrap(function _callee21$(_context21) {
      var _rec11 = new _powerAssertRecorder();

      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            fn = function () {
              var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee20(req, res) {
                var body;
                return _regenerator2.default.wrap(function _callee20$(_context20) {
                  while (1) {
                    switch (_context20.prev = _context20.next) {
                      case 0:
                        _context20.next = 2;
                        return (0, _lib.json)(req, { limit: 100 });

                      case 2:
                        body = _context20.sent;

                        (0, _lib.send)(res, 200, { response: body.some.cool });

                      case 4:
                      case 'end':
                        return _context20.stop();
                    }
                  }
                }, _callee20, undefined);
              })),
                  _this = undefined;
              return function fn(_x32, _x33) {
                return ref.apply(_this, arguments);
              };
            }();

            _context21.next = 3;
            return (0, _listen2.default)(fn);

          case 3:
            url = _context21.sent;
            _context21.next = 6;
            return (0, _requestPromise2.default)(url, {
              method: 'POST',
              body: { some: { cool: 'json' } },
              json: true
            });

          case 6:
            body = _context21.sent;

            t.same(_rec11._expr(_rec11._capt(_rec11._capt(body, 'arguments/0/object').response, 'arguments/0'), {
              content: 't.same(body.response, \'json\')',
              filepath: 'build/test/index.js',
              line: 654
            }), 'json');

          case 8:
          case 'end':
            return _context21.stop();
        }
      }
    }, _callee21, undefined);
  })),
      _this = undefined;
  return function (_x31) {
    return ref.apply(_this, arguments);
  };
}());

_ava2.default.only('json limit (over)', function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee23(t) {
    var fn, url;
    return _regenerator2.default.wrap(function _callee23$(_context23) {
      var _rec12 = new _powerAssertRecorder();

      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            fn = function () {
              var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee22(req, res) {
                var body;
                return _regenerator2.default.wrap(function _callee22$(_context22) {
                  while (1) {
                    switch (_context22.prev = _context22.next) {
                      case 0:
                        _context22.next = 2;
                        return (0, _lib.json)(req, { limit: 3 });

                      case 2:
                        body = _context22.sent;

                        (0, _lib.send)(res, 200, { response: body.some.cool });

                      case 4:
                      case 'end':
                        return _context22.stop();
                    }
                  }
                }, _callee22, undefined);
              })),
                  _this = undefined;
              return function fn(_x35, _x36) {
                return ref.apply(_this, arguments);
              };
            }();

            _context23.next = 3;
            return (0, _listen2.default)(fn);

          case 3:
            url = _context23.sent;
            _context23.prev = 4;
            _context23.next = 7;
            return (0, _requestPromise2.default)(url, {
              method: 'POST',
              body: { some: { cool: 'json' } },
              json: true
            });

          case 7:
            _context23.next = 12;
            break;

          case 9:
            _context23.prev = 9;
            _context23.t0 = _context23['catch'](4);

            t.same(_rec12._expr(_rec12._capt(_rec12._capt(_rec12._capt(_context23, 'arguments/0/object/object').t0, 'arguments/0/object').statusCode, 'arguments/0'), {
              content: 't.same(_context23.t0.statusCode, 413)',
              filepath: 'build/test/index.js',
              line: 725
            }), 413);

          case 12:
          case 'end':
            return _context23.stop();
        }
      }
    }, _callee23, undefined, [[4, 9]]);
  })),
      _this = undefined;
  return function (_x34) {
    return ref.apply(_this, arguments);
  };
}());

// test request error (?)
// test accept