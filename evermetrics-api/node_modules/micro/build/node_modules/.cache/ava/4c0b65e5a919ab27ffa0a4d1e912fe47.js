'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }();

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _lib = require('../lib/');

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _listen = require('./_listen');

var _listen2 = _interopRequireDefault(_listen);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

(0, _ava2.default)('should export json', function (t) {
  var _rec = new _powerAssertRecorder();

  t.ok(_rec._expr(_rec._capt(_rec._capt(_lib, 'arguments/0/object').json, 'arguments/0'), {
    content: 't.ok(_lib.json)',
    filepath: 'build/test/index.js',
    line: 28
  }));
});

(0, _ava2.default)('should receive json', function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(t) {
    var url, req;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (0, _listen2.default)(function () {
              var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(req, res) {
                return _regenerator2.default.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        (0, _lib.send)(res, 200, { a: 'b' });

                      case 1:
                      case 'end':
                        return _context.stop();
                    }
                  }
                }, _callee, undefined);
              })),
                  _this = undefined;
              return function (_x2, _x3) {
                return ref.apply(_this, arguments);
              };
            }());

          case 2:
            url = _context2.sent;
            _context2.next = 5;
            return (0, _requestPromise2.default)(url);

          case 5:
            req = _context2.sent;

            console.log(req);

          case 7:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })),
      _this = undefined;
  return function (_x) {
    return ref.apply(_this, arguments);
  };
}());

// test regular string send
// test json object send
// test only code send
// test manual httpCode error
// test manual 500 error
// test onError callback
// test json parse error
// test request error (?)