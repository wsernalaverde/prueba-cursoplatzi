html
  head
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0, user-scalable=no')
    link(rel='stylesheet', href='style.css', type='text/css')
    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css')
    link(rel='apple-touch-icon', sizes='57x57', href='/apple-icon-57x57.png')
    link(rel='apple-touch-icon', sizes='60x60', href='/apple-icon-60x60.png')
    link(rel='apple-touch-icon', sizes='72x72', href='/apple-icon-72x72.png')
    link(rel='apple-touch-icon', sizes='76x76', href='/apple-icon-76x76.png')
    link(rel='apple-touch-icon', sizes='114x114', href='/apple-icon-114x114.png')
    link(rel='apple-touch-icon', sizes='120x120', href='/apple-icon-120x120.png')
    link(rel='apple-touch-icon', sizes='144x144', href='/apple-icon-144x144.png')
    link(rel='apple-touch-icon', sizes='152x152', href='/apple-icon-152x152.png')
    link(rel='apple-touch-icon', sizes='180x180', href='/apple-icon-180x180.png')
    link(rel='icon', type='image/png', sizes='192x192', href='/android-icon-192x192.png')
    link(rel='icon', type='image/png', sizes='32x32', href='/favicon-32x32.png')
    link(rel='icon', type='image/png', sizes='96x96', href='/favicon-96x96.png')
    link(rel='icon', type='image/png', sizes='16x16', href='/favicon-16x16.png')
    link(rel='manifest', href='/manifest.json')
    meta(name='msapplication-TileColor', content='#ffffff')
    meta(name='msapplication-TileImage', content='/ms-icon-144x144.png')
    meta(name='theme-color', content='#ffffff')
    title=title
  body
    section#header-container
    section#main-container
    footer.site-footer
      .container
        .col-izq-ft.row
          .col.s12.l3.push-l1
            a.logo(href='#') Evermetrics
          .col.s12.l3.push-l5(style='text-align: center')
            button.btn.btn-contact.btn-contact-footer(type='submit', href='http://eversocial.co/contact/', target='_blank') Contacto
        .col-der-ft.row
          .col.s12.l7.push-l1
            | Evermetrics © 2017
          .col.s12.l4(style='text-align: right')
            a.btn-politicas(href='http://siempresas.co/politica-tratamiento-informacion/', target='_blank') Ver política de Eversocial sobre uso de datos personales
    script(src='http://code.jquery.com/jquery-3.1.1.min.js', integrity='sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=', crossorigin='anonymous')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.8/js/materialize.min.js')
    script(type='application/javascript' src='app.js')
    script(type='application/javascript' src='Chart.js')
    script.
      (function ($) {
      $.fn.countTo = function (options) {
      options = options || {};
      return $(this).each(function () {
      // set options for current element
      var settings = $.extend({}, $.fn.countTo.defaults, {
      from:            $(this).data('from'),
      to:              $(this).data('to'),
      speed:           $(this).data('speed'),
      refreshInterval: $(this).data('refresh-interval'),
      decimals:        $(this).data('decimals')
      }, options);
      // how many times to update the value, and how much to increment the value on each update
      var loops = Math.ceil(settings.speed / settings.refreshInterval),
      increment = (settings.to - settings.from) / loops;
      // references & variables that will change with each update
      var self = this,
      $self = $(this),
      loopCount = 0,
      value = settings.from,
      data = $self.data('countTo') || {};
      $self.data('countTo', data);
      // if an existing interval can be found, clear it first
      if (data.interval) {
      clearInterval(data.interval);
      }
      data.interval = setInterval(updateTimer, settings.refreshInterval);
      // initialize the element with the starting value
      render(value);
      function updateTimer() {
      value += increment;
      loopCount++;
      render(value);
      if (typeof(settings.onUpdate) == 'function') {
      settings.onUpdate.call(self, value);
      }
      if (loopCount >= loops) {
      // remove the interval
      $self.removeData('countTo');
      clearInterval(data.interval);
      value = settings.to;
      if (typeof(settings.onComplete) == 'function') {
      settings.onComplete.call(self, value);
      }
      }
      }
      function render(value) {
      var formattedValue = settings.formatter.call(self, value, settings);
      $self.html(formattedValue);
      }
      });
      };
      $.fn.countTo.defaults = {
      from: 0,               // the number the element should start at
      to: 0,                 // the number the element should end at
      speed: 1000,           // how long it should take to count between the target numbers
      refreshInterval: 100,  // how often the element should be updated
      decimals: 0,           // the number of decimal places to show
      formatter: formatter,  // handler for formatting the value before rendering
      onUpdate: null,        // callback method for every time the element is updated
      onComplete: null       // callback method for when the element finishes updating
      };
      function formatter(value, settings) {
      return value.toFixed(settings.decimals);
      }
      $(document).ready(function() {
      $(".tabs-menu-redes a").click(function(event) {
      event.preventDefault();
      $(this).parent().addClass("current");
      $(this).parent().siblings().removeClass("current");
      var tab = $(this).attr("href");
      $(".tab-content-redes").not(tab).css("display", "none");
      $(tab).fadeIn();
      });
      });
      $(document).ready(function() {
      $(".tabs-menu-datos a").click(function(event) {
      event.preventDefault();
      $(this).parent().removeClass("current");
      $(this).parent().siblings().addClass("current");
      var tab = $(this).attr("href");
      $(".tab-content-datos").not(tab).css("display", "none");
      $(tab).fadeIn();
      });
      });
      }(jQuery));
      jQuery(function ($) {
      // custom formatting example
      $('#count-number').data('countToOptions', {
      formatter: function (value, options) {
      return value.toFixed(options.decimals).replace(/\\B(?=(?:\d{3})+(?!\d))/g, ',');
      }
      });
      // start all the timers
      $('.timer').each(count);
      function count(options) {
      var $this = $(this);
      options = $.extend({}, options || {}, $this.data('countToOptions') || {});
      $this.countTo(options);
      }
      });
