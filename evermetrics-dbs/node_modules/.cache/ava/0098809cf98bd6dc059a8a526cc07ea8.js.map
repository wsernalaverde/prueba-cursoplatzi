{"version":3,"sources":["db-test.js"],"names":["test","require","uuid","r","Db","utils","fixtures","beforeEach","t","dbName","v4","db","setup","connect","context","true","connected","afterEach","always","disconnect","false","conn","dbDrop","run","is","saveImage","image","getImage","created","description","url","likes","liked","deepEqual","tags","userId","id","publicId","encode","truthy","createdAt","likeImage","result","throws","getImages","images","saveImages","map","img","all","length","saveUser","user","getUser","plainPassword","password","username","email","name","encrypt","authenticate","success","fail","failure","getImageByUser","random","Math","round","i","push","getImageByTag","tag"],"mappings":"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","file":"db-test.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst uuid = require('uuid-base62')\nconst r = require('rethinkdb')\nconst Db = require('../')\nconst utils = require('../lib/utils')\nconst fixtures = require('./fixtures')\n\ntest.beforeEach('setup database', async t => {\n  const dbName = `evermetrics_${uuid.v4()}`\n  const db = new Db({ db: dbName, setup: true })\n  await db.connect()\n  t.context.db = db\n  t.context.dbName = dbName\n  t.true(db.connected, 'should be connected')\n})\n\ntest.afterEach.always('cleanup database', async t => {\n  let db = t.context.db\n  let dbName = t.context.dbName\n\n  await db.disconnect()\n  t.false(db.connected, 'should be disconnected')\n\n  let conn = await r.connect({})\n  await r.dbDrop(dbName).run(conn)\n})\n\ntest('save image', async t => {\n  let db = t.context.db\n\n  t.is(typeof db.saveImage, 'function', 'saveImage is function')\n\n  let image = fixtures.getImage()\n\n  let created = await db.saveImage(image)\n  t.is(created.description, image.description)\n  t.is(created.url, image.url)\n  t.is(created.likes, image.likes)\n  t.is(created.liked, image.liked)\n  t.deepEqual(created.tags, [ '#awesome', '#tags', '#platzi' ])\n  t.is(created.userId, image.userId)\n  t.is(typeof created.id, 'string')\n  t.is(created.publicId, uuid.encode(created.id))\n  t.truthy(created.createdAt)\n})\n\ntest('like image', async t => {\n  let db = t.context.db\n\n  t.is(typeof db.likeImage, 'function', 'likeImage is a function')\n\n  let image = fixtures.getImage()\n  let created = await db.saveImage(image)\n  let result = await db.likeImage(created.publicId)\n\n  t.true(result.liked)\n  t.is(result.likes, image.likes + 1)\n})\n\ntest('get image', async t => {\n  let db = t.context.db\n\n  t.is(typeof db.getImage, 'function', 'getImage is a fucntion')\n\n  let image = fixtures.getImage()\n  let created = await db.saveImage(image)\n  let result = await db.getImage(created.publicId)\n\n  t.deepEqual(created, result)\n\n  t.throws(db.getImage('foo'), /not found/)\n})\n\ntest('list all images', async t => {\n  let db = t.context.db\n\n  t.is(typeof db.getImages, 'function', 'getImages is a fucntion')\n\n  let images = fixtures.getImages(3)\n  let saveImages = images.map(img => db.saveImage(img))\n  let created = await Promise.all(saveImages)\n  let result = await db.getImages()\n\n  t.is(created.length, result.length)\n})\n\ntest('save user', async t => {\n  let db = t.context.db\n\n  t.is(typeof db.saveUser, 'function', 'saveUser is a function')\n\n  let user = fixtures.getUser()\n  let plainPassword = user.password\n  let created = await db.saveUser(user)\n\n  t.is(user.username, created.username)\n  t.is(user.email, created.email)\n  t.is(user.name, created.name)\n  t.is(utils.encrypt(plainPassword), created.password)\n  t.is(typeof created.id, 'string')\n  t.truthy(created.createdAt)\n})\n\ntest('get user', async t => {\n  let db = t.context.db\n\n  t.is(typeof db.getUser, 'function', 'getUser is a function')\n\n  let user = fixtures.getUser()\n  let created = await db.saveUser(user)\n  let result = await db.getUser(user.username)\n\n  t.deepEqual(created, result)\n\n  t.throws(db.getUser('foo'), /not found/)\n})\n\ntest('authenticate user', async t => {\n  let db = t.context.db\n\n  t.is(typeof db.authenticate, 'function', 'authenticate is a function')\n\n  let user = fixtures.getUser()\n  let plainPassword = user.password\n  await db.saveUser(user)\n\n  let success = await db.authenticate(user.username, plainPassword)\n  t.true(success)\n\n  let fail = await db.authenticate(user.username, 'foo')\n  t.false(fail)\n\n  let failure = await db.authenticate('foo', 'bar')\n  t.false(failure)\n})\n\ntest('list images by user', async t => {\n  let db = t.context.db\n\n  t.is(typeof db.getImageByUser, 'function', 'getImageByUser is a function')\n\n  let images = fixtures.getImages(10)\n  let userId = uuid.uuid()\n  let random = Math.round(Math.random() * images.length)\n\n  let saveImages = []\n  for (let i = 0; i < images.length; i++) {\n    if (i < random) {\n      images[i].userId = userId\n    }\n\n    saveImages.push(db.saveImage(images[i]))\n  }\n\n  await Promise.all(saveImages)\n\n  let result = await db.getImageByUser(userId)\n  t.is(result.length, random)\n})\n\ntest('list images by tags', async t => {\n  let db = t.context.db\n\n  t.is(typeof db.getImageByTag, 'function', 'getImageByTag is a function')\n\n  let images = fixtures.getImages(10)\n  let tag = '#filterit'\n  let random = Math.round(Math.random() * images.length)\n\n  let saveImages = []\n  for (let i = 0; i < images.length; i++) {\n    if (i < random) {\n      images[i].description = tag\n    }\n\n    saveImages.push(db.saveImage(images[i]))\n  }\n\n  await Promise.all(saveImages)\n\n  let result = await db.getImageByTag(tag)\n  t.is(result.length, random)\n})\n"]}