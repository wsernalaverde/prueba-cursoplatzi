{"version":3,"sources":["db-test.js"],"names":["test","require","uuid","r","Db","fixtures","dbName","v4","db","before","t","connect","true","connected","after","disconnect","false","always","conn","dbDrop","run","is","saveImage","image","getImage","created","description","url","likes","liked","deepEqual","tags","user_id","id","public_id","encode","truthy","createdAt","likeImage","result","getImages","images","saveImages","map","img","all","length"],"mappings":"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","file":"db-test.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst uuid = require('uuid-base62')\nconst r = require('rethinkdb')\nconst Db = require('../')\nconst fixtures = require('./fixtures')\n\nconst dbName = `evermetrics_${uuid.v4()}`\nconst db = new Db({ db: dbName })\n\ntest.before('setup database', async t => {\n  await db.connect()\n  t.true(db.connected, 'should be connected')\n})\n\ntest.after('disconnect database', async t => {\n  await db.disconnect()\n  t.false(db.connected, 'should be disconnected')\n})\n\ntest.after.always('clean database', async t => {\n  let conn = await r.connect({})\n  await r.dbDrop(dbName).run(conn)\n})\n\ntest('save image', async t => {\n  t.is(typeof db.saveImage, 'function', 'saveImage is function')\n\n  let image = fixtures.getImage()\n\n  let created = await db.saveImage(image)\n  t.is(created.description, image.description)\n  t.is(created.url, image.url)\n  t.is(created.likes, image.likes)\n  t.is(created.liked, image.liked)\n  t.deepEqual(created.tags, [ '#awesome', '#tags', '#platzi' ])\n  t.is(created.user_id, image.user_id)\n  t.is(typeof created.id, 'string')\n  t.is(created.public_id, uuid.encode(created.id))\n  t.truthy(created.createdAt)\n})\n\ntest('like image', async t => {\n  t.is(typeof db.likeImage, 'function', 'likeImage is a function')\n\n  let image = fixtures.getImage()\n  let created = await db.saveImage(image)\n  let result = await db.likeImage(created.public_id)\n\n  t.true(result.liked)\n  t.is(result.likes, image.likes + 1)\n})\n\ntest('get image', async t => {\n  t.is(typeof db.getImage, 'function', 'getImage is a fucntion')\n\n  let image = fixtures.getImage()\n  let created = await db.saveImage(image)\n  let result = await db.getImage(created.public_id)\n\n  t.deepEqual(created, result)\n})\n\ntest('list all images', async t => {\n  t.is(typeof db.getImages, 'function', 'getImages is a fucntion')\n\n  let images = fixtures.getImages(3)\n  let saveImages = images.map(img => db.saveImage(img))\n  let created = await Promise.all(saveImages)\n  let result = await db.getImages()\n\n  t.is(created.length, result.length)\n})\n"]}