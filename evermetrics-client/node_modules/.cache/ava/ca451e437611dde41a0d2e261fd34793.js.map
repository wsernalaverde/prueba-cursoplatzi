{"version":3,"sources":["client-test.js"],"names":["test","require","nock","evermetrics","fixtures","options","endpoints","pictures","users","auth","beforeEach","t","context","client","createClient","is","getPicture","savePicture","likePicture","listPicture","listPictureByTag","saveUser","getUser","image","getImage","get","publicId","reply","result","deepEqual","token","newImage","src","description","reqheaders","post","liked","likes","images","getImages","tag","user","newUser","username","name","email","password"],"mappings":"AAAA;;;;;;;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,MAAME,cAAcF,QAAQ,KAAR,CAApB;AACA,MAAMG,WAAWH,QAAQ,aAAR,CAAjB;;AAEA,IAAII,UAAU;AACZC,aAAW;AACTC,cAAU,gCADD;AAETC,WAAO,8BAFE;AAGTC,UAAM;AAHG;AADC,CAAd;;AAQAT,KAAKU,UAAL,CAAgBC,KAAK;AACnBA,IAAEC,OAAF,CAAUC,MAAV,GAAmBV,YAAYW,YAAZ,CAAyBT,OAAzB,CAAnB;AACD,CAFD;;AAIAL,KAAK,QAAL,EAAeW,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAClB,QAAME,SAASF,EAAEC,OAAF,CAAUC,MAAzB;;AAEAF,IAAEI,EAAF,uBAAK,kBAAO,kDAAOC,UAAd,yBAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA+B,UAA/B;AACAL,IAAEI,EAAF,yBAAK,mBAAO,mDAAOE,WAAd,yBAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAgC,UAAhC;AACAN,IAAEI,EAAF,yBAAK,mBAAO,mDAAOG,WAAd,yBAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAgC,UAAhC;AACAP,IAAEI,EAAF,yBAAK,mBAAO,mDAAOI,WAAd,yBAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAgC,UAAhC;AACAR,IAAEI,EAAF,yBAAK,mBAAO,mDAAOK,gBAAd,yBAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAqC,UAArC;AACAT,IAAEI,EAAF,yBAAK,mBAAO,mDAAOM,QAAd,yBAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA6B,UAA7B;AACAV,IAAEI,EAAF,yBAAK,mBAAO,mDAAOO,OAAd,yBAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA4B,UAA5B;AACAX,IAAEI,EAAF,yBAAK,mBAAO,mDAAON,IAAd,yBAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAyB,UAAzB;AACD,CAXD;;AAaAT,KAAK,YAAL;AAAA,6CAAmB,WAAMW,CAAN,EAAW;AAAA;AAAA;;AAC5B,UAAME,SAASF,EAAEC,OAAF,CAAUC,MAAzB;;AAEA,QAAIU,QAAQnB,SAASoB,QAAT,EAAZ;;AAEAtB,SAAKG,QAAQC,SAAR,CAAkBC,QAAvB,EACGkB,GADH,CACQ,KAAGF,MAAMG,QAAS,GAD1B,EAEGC,KAFH,CAES,GAFT,EAEcJ,KAFd;;AAIA,QAAIK,SAAS,MAAMf,OAAOG,UAAP,CAAkBO,MAAMG,QAAxB,CAAnB;;AAEAf,MAAEkB,SAAF,yBAAYN,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAmBK,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GAZD;;AAAA;AAAA;AAAA;AAAA;;AAcA5B,KAAK,aAAL;AAAA,8CAAoB,WAAMW,CAAN,EAAW;AAAA;AAAA;;AAC7B,UAAME,SAASF,EAAEC,OAAF,CAAUC,MAAzB;;AAEA,QAAIiB,QAAQ,aAAZ;AACA,QAAIP,QAAQnB,SAASoB,QAAT,EAAZ;AACA,QAAIO,WAAW;AACbC,WAAKT,MAAMS,GADE;AAEbC,mBAAaV,MAAMU;AAFN,KAAf;;AAKA/B,SAAKG,QAAQC,SAAR,CAAkBC,QAAvB,EAAiC;AAC/B2B,kBAAY;AACV,yBAAkB,WAASJ,KAAM;AADvB;AADmB,KAAjC,EAKGK,IALH,CAKQ,GALR,EAKaJ,QALb,EAMGJ,KANH,CAMS,GANT,EAMcJ,KANd;;AAQA,QAAIK,SAAS,MAAMf,OAAOI,WAAP,CAAmBc,QAAnB,EAA6BD,KAA7B,CAAnB;;AAEAnB,MAAEkB,SAAF,2BAAYD,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAoBL,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GArBD;;AAAA;AAAA;AAAA;AAAA;;AAuBAvB,KAAK,aAAL;AAAA,8CAAoB,WAAMW,CAAN,EAAW;AAAA;AAAA;;AAC7B,UAAME,SAASF,EAAEC,OAAF,CAAUC,MAAzB;;AAEA,QAAIU,QAAQnB,SAASoB,QAAT,EAAZ;AACAD,UAAMa,KAAN,GAAc,IAAd;AACAb,UAAMc,KAAN,GAAc,CAAd;;AAEAnC,SAAKG,QAAQC,SAAR,CAAkBC,QAAvB,EACG4B,IADH,CACS,KAAGZ,MAAMG,QAAS,QAD3B,EAEGC,KAFH,CAES,GAFT,EAEcJ,KAFd;;AAIA,QAAIK,SAAS,MAAMf,OAAOK,WAAP,CAAmBK,MAAMG,QAAzB,CAAnB;;AAEAf,MAAEkB,SAAF,2BAAYN,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAmBK,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GAdD;;AAAA;AAAA;AAAA;AAAA;;AAgBA5B,KAAK,aAAL;AAAA,8CAAoB,WAAMW,CAAN,EAAW;AAAA;AAAA;;AAC7B,UAAME,SAASF,EAAEC,OAAF,CAAUC,MAAzB;;AAEA,QAAIyB,SAASlC,SAASmC,SAAT,CAAmB,CAAnB,CAAb;;AAEArC,SAAKG,QAAQC,SAAR,CAAkBC,QAAvB,EACGkB,GADH,CACO,OADP,EAEGE,KAFH,CAES,GAFT,EAEcW,MAFd;;AAIA,QAAIV,SAAS,MAAMf,OAAOM,WAAP,EAAnB;;AAEAR,MAAEkB,SAAF,2BAAYS,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAoBV,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GAZD;;AAAA;AAAA;AAAA;AAAA;;AAcA5B,KAAK,kBAAL;AAAA,8CAAyB,WAAMW,CAAN,EAAW;AAAA;AAAA;;AAClC,UAAME,SAASF,EAAEC,OAAF,CAAUC,MAAzB;;AAEA,QAAIyB,SAASlC,SAASmC,SAAT,CAAmB,CAAnB,CAAb;AACA,QAAIC,MAAM,aAAV;;AAEAtC,SAAKG,QAAQC,SAAR,CAAkBC,QAAvB,EACGkB,GADH,CACQ,SAAOe,GAAI,GADnB,EAEGb,KAFH,CAES,GAFT,EAEcW,MAFd;;AAIA,QAAIV,SAAS,MAAMf,OAAOO,gBAAP,CAAwBoB,GAAxB,CAAnB;;AAEA7B,MAAEkB,SAAF,2BAAYS,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAoBV,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GAbD;;AAAA;AAAA;AAAA;AAAA;;AAeA5B,KAAK,UAAL;AAAA,8CAAiB,WAAMW,CAAN,EAAW;AAAA;AAAA;;AAC1B,UAAME,SAASF,EAAEC,OAAF,CAAUC,MAAzB;;AAEA,QAAI4B,OAAOrC,SAASkB,OAAT,EAAX;AACA,QAAIoB,UAAU;AACZC,gBAAUF,KAAKE,QADH;AAEZC,YAAMH,KAAKG,IAFC;AAGZC,aAAO,uBAHK;AAIZC,gBAAU;AAJE,KAAd;;AAOA5C,SAAKG,QAAQC,SAAR,CAAkBE,KAAvB,EACG2B,IADH,CACQ,GADR,EACaO,OADb,EAEGf,KAFH,CAES,GAFT,EAEcc,IAFd;;AAIA,QAAIb,SAAS,MAAMf,OAAOQ,QAAP,CAAgBqB,OAAhB,CAAnB;;AAEA/B,MAAEkB,SAAF,2BAAYD,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAoBa,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GAlBD;;AAAA;AAAA;AAAA;AAAA;;AAoBAzC,KAAK,SAAL;AAAA,8CAAgB,WAAMW,CAAN,EAAW;AAAA;AAAA;;AACzB,UAAME,SAASF,EAAEC,OAAF,CAAUC,MAAzB;;AAEA,QAAI4B,OAAOrC,SAASkB,OAAT,EAAX;;AAEApB,SAAKG,QAAQC,SAAR,CAAkBE,KAAvB,EACGiB,GADH,CACQ,KAAGgB,KAAKE,QAAS,GADzB,EAEGhB,KAFH,CAES,GAFT,EAEcc,IAFd;;AAIA,QAAIb,SAAS,MAAMf,OAAOS,OAAP,CAAemB,KAAKE,QAApB,CAAnB;;AAEAhC,MAAEkB,SAAF,2BAAYD,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAoBa,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GAZD;;AAAA;AAAA;AAAA;AAAA","file":"client-test.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst nock = require('nock')\nconst evermetrics = require('../')\nconst fixtures = require('./fixtures/')\n\nlet options = {\n  endpoints: {\n    pictures: 'http://evermetrics.test/picure',\n    users: 'http://evermetrics.test/user',\n    auth: 'http://evermetrics.test/auth'\n  }\n}\n\ntest.beforeEach(t => {\n  t.context.client = evermetrics.createClient(options)\n})\n\ntest('client', t => {\n  const client = t.context.client\n\n  t.is(typeof client.getPicture, 'function')\n  t.is(typeof client.savePicture, 'function')\n  t.is(typeof client.likePicture, 'function')\n  t.is(typeof client.listPicture, 'function')\n  t.is(typeof client.listPictureByTag, 'function')\n  t.is(typeof client.saveUser, 'function')\n  t.is(typeof client.getUser, 'function')\n  t.is(typeof client.auth, 'function')\n})\n\ntest('getPicture', async t => {\n  const client = t.context.client\n\n  let image = fixtures.getImage()\n\n  nock(options.endpoints.pictures)\n    .get(`/${image.publicId}`)\n    .reply(200, image)\n\n  let result = await client.getPicture(image.publicId)\n\n  t.deepEqual(image, result)\n})\n\ntest('savePicture', async t => {\n  const client = t.context.client\n\n  let token = 'xxx-xxx-xxx'\n  let image = fixtures.getImage()\n  let newImage = {\n    src: image.src,\n    description: image.description\n  }\n\n  nock(options.endpoints.pictures, {\n    reqheaders: {\n      'Authorization': `Bearer ${token}`\n    }\n  })\n    .post('/', newImage)\n    .reply(201, image)\n\n  let result = await client.savePicture(newImage, token)\n\n  t.deepEqual(result, image)\n})\n\ntest('likePicture', async t => {\n  const client = t.context.client\n\n  let image = fixtures.getImage()\n  image.liked = true\n  image.likes = 1\n\n  nock(options.endpoints.pictures)\n    .post(`/${image.publicId}/like`)\n    .reply(200, image)\n\n  let result = await client.likePicture(image.publicId)\n\n  t.deepEqual(image, result)\n})\n\ntest('listPicture', async t => {\n  const client = t.context.client\n\n  let images = fixtures.getImages(3)\n\n  nock(options.endpoints.pictures)\n    .get('/list')\n    .reply(200, images)\n\n  let result = await client.listPicture()\n\n  t.deepEqual(images, result)\n})\n\ntest('listPictureByTag', async t => {\n  const client = t.context.client\n\n  let images = fixtures.getImages(3)\n  let tag = 'evermetrics'\n\n  nock(options.endpoints.pictures)\n    .get(`/tag/${tag}`)\n    .reply(200, images)\n\n  let result = await client.listPictureByTag(tag)\n\n  t.deepEqual(images, result)\n})\n\ntest('saveUser', async t => {\n  const client = t.context.client\n\n  let user = fixtures.getUser()\n  let newUser = {\n    username: user.username,\n    name: user.name,\n    email: 'user@evermetrics.test',\n    password: 'ev4r'\n  }\n\n  nock(options.endpoints.users)\n    .post('/', newUser)\n    .reply(201, user)\n\n  let result = await client.saveUser(newUser)\n\n  t.deepEqual(result, user)\n})\n\ntest('getUser', async t => {\n  const client = t.context.client\n\n  let user = fixtures.getUser()\n\n  nock(options.endpoints.users)\n    .get(`/${user.username}`)\n    .reply(200, user)\n\n  let result = await client.getUser(user.username)\n\n  t.deepEqual(result, user)\n})\n"]}